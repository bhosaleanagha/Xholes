defmodule XholesWeb.GameChannel do
  use XholesWeb, :channel

	alias Xholes.Game
  def join("game:" <> name, payload, socket) do
	IO.puts(name);
    if authorized?(payload) do
	game = Game.new();
	socket = socket
	|>assign(:game,game)
        |>assign(:name,name)
	{:ok, %{"join" => name, "game" => Game.client_view(game)},socket}
    else
      {:error, %{reason: "unauthorized"}}
    end
  end


  # Channels can be used in a request/response fashion
  # by sending replies to requests from the client
  def handle_in("cardDrawn", %{"deckCount" => dc, "drawn" => d, "prev" => p}, socket) do
    game = Game.cardDraw(socket.assigns[:game], dc, d, p)
    socket = assign(socket, :game, game)
    {:reply, {:ok, %{"game" => Game.client_view(game) }}, socket}

  end
  
   def handle_in("cvOpened", %{"cards" => cards1, "pos1" => post1, "pos2" => post2}, socket) do
    game = Game.cvOpen(socket.assigns[:game], cards1, post1, post2)
    socket = assign(socket, :game, game)
    {:reply, {:ok, %{"game" => Game.client_view(game) }}, socket}

  end
  
  def handle_in("swap", %{"cards" => cards1, "pos1" => post1, "pos2" => post2, "deck" => deck1, "deckPos" => dp1, "newDPos" => dp2}, socket) do
    game = Game.swap(socket.assigns[:game], cards1, post1, post2, deck1, dp1, dp2)
    socket = assign(socket, :game, game)
    {:reply, {:ok, %{"game" => Game.client_view(game) }}, socket}

  end
  
  def handle_in("changeTurn", %{"cards" => cards1, "deck" => deck1, "turn" => turn1}, socket) do
    game = Game.chnTurn(socket.assigns[:game], cards1, deck1, turn1)
    socket = assign(socket, :game, game)
    {:reply, {:ok, %{"game" => Game.client_view(game) }}, socket}

  end

  # It is also common to receive messages from the client and
  # broadcast to everyone in the current topic (games:lobby).
  def handle_in("shout", payload, socket) do
    broadcast socket, "shout", payload
    {:noreply, socket}
  end

  # Add authorization logic here as required.
  defp authorized?(_payload) do
    true
  end
end
